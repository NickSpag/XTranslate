// This file has been autogenerated from a class added in the UI designer.

using System;

using Foundation;
using UIKit;
using Plugin.Media.Abstractions;
using System.Threading.Tasks;
using System.Net.Http;
using System.IO;
using System.Net.Http.Headers;
using Newtonsoft.Json;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization;
using System.Xml;

namespace XTranslate.iOS
{
    public partial class IndicatorViewController : UIViewController
    {
        #region Fields: Private
        private UIImage imageToBeShown;
        private string imagePath;
        #endregion

        #region Constructors
        public IndicatorViewController(IntPtr handle) : base(handle)
        {

        }

        public static async Task<IndicatorViewController> WithMediaFile(MediaFile picture)
        {
            var storyboard = UIStoryboard.FromName("Main", null);

            var indicatorPage = storyboard.InstantiateViewController("IndicatorViewController") as IndicatorViewController;

            await Task.Run(() => indicatorPage.PrepareImage(picture));

            return indicatorPage;
        }
        #endregion

        #region Methods: Overrides
        public override void ViewDidLoad()
        {
            base.ViewDidLoad();

            ConfigureEventHandlers();

            if (imageToBeShown != null && this.image != null)
                this.image.Image = imageToBeShown;
        }
        #endregion

        #region Methods: Private
        private void PrepareImage(MediaFile picture)
        {
            imageToBeShown = ConvertToNativeImage(picture);
        }

        private UIImage ConvertToNativeImage(MediaFile picture)
        {
            if (picture != null)
            {
                imagePath = picture.Path;
                return UIImage.FromFile(imagePath);
            }
            else
                return null;
        }

        private async Task Translate()
        {
            var sourceText = await Task.Run(() => ReadTextFromImage());
            ocrWordLabel.Text = sourceText;

            var translationText = await Task.Run(() => TranslateText(sourceText));
            ocrWordLabel.Text = translationText;
        }

        private async Task<string> ReadTextFromImage()
        {
            var client = ConstructAnalyzeClient();
            byte[] byteData = GetImageAsByteArray(imagePath);

            var operationValue = await RequestAnalysis(client, byteData);

            var text = await RequestHandwritingAnalysisResults(client, operationValue);

            return text;
        }

        private async Task<string> RequestTranslation(HttpClient client, string toBeTranslated)
        {
            HttpResponseMessage response;

            var languageKey = Help.Settings.SelectedLanguage;

            string languageCode;

            if (!Help.Languages.LanguageCodes.TryGetValue(languageKey, out languageCode))
                languageCode = Help.Languages.DefaultLanguageCode;

            var urlString = Help.PrivateKeys.TranslatorApi + "?text=" + System.Uri.EscapeUriString(toBeTranslated) + "&to=" + languageCode;
            var uri = new Uri(urlString);

            HttpRequestMessage request = new HttpRequestMessage(HttpMethod.Get, uri);

            response = await client.SendAsync(request);
            var result = await response.Content.ReadAsStringAsync();

            XmlDocument doc = new XmlDocument();
            doc.LoadXml(result);

            var text = doc.InnerText;
            return text;
        }

        private async Task<string> RequestAnalysis(HttpClient client, byte[] byteData)
        {
            HttpResponseMessage response;

            using (ByteArrayContent content = new ByteArrayContent(byteData))
            {
                content.Headers.ContentType = new MediaTypeHeaderValue("application/octet-stream");

                var uri = new Uri(Help.PrivateKeys.CognitiveServicesUrl(ComputerVisionServiceType.AnalyzeHandwriting));

                response = await client.PostAsync(uri, content);

                System.Console.WriteLine(await response.Content.ReadAsStringAsync());

                IEnumerable<string> operationValue;
                response.Headers.TryGetValues("Operation-Location", out operationValue);

                return operationValue.First();
            }
        }

        private async Task<string> RequestHandwritingAnalysisResults(HttpClient client, string operationUrl)
        {
            var uri = new Uri(operationUrl);

            HttpResponseMessage response;
            string result = "";

            int attempts = 0;

            while (attempts < 5)
            {
                await Task.Delay(TimeSpan.FromSeconds(1));

                var request = new HttpRequestMessage(HttpMethod.Get, uri);
                response = await client.SendAsync(request);

                var responseObject = JsonConvert.DeserializeObject<AzureAnalyzeImageResponse>(await response.Content.ReadAsStringAsync());

                switch (responseObject.Status)
                {

                    case "Succeeded":
                        string wording = "";

                        foreach (var wordLine in responseObject.RecognitionResult.Lines)
                        {
                            wording = wording + wordLine.Text + " ";
                        }

                        return wording;
                    //return responseObject.RecognitionResult.Lines[0].Text;
                    case "Not started":
                        System.Console.WriteLine("Not started. Trying again...");
                        break;
                    case "Running":
                        System.Console.WriteLine("Still running. Trying again...");
                        break;
                    case "Failed":
                        System.Console.WriteLine("Failed. Exiting.");
                        break;
                    default:
                        break;
                }

                if (responseObject.Status == "Failed")
                    return string.Empty;
            }

            return string.Empty;

        }

        private static byte[] GetImageAsByteArray(string imageFilePath)
        {
            FileStream fileStream = new FileStream(imageFilePath, FileMode.Open, FileAccess.Read);
            BinaryReader binaryReader = new BinaryReader(fileStream);
            return binaryReader.ReadBytes((int)fileStream.Length);
        }


        private async Task<string> TranslateText(string toBeTranslated)
        {
            var client = ConstructTranslatorClient();

            return await RequestTranslation(client, toBeTranslated);
        }

        private HttpClient ConstructAnalyzeClient()
        {
            HttpClient client = new HttpClient();

            // Request headers.
            client.DefaultRequestHeaders.Add("Ocp-Apim-Subscription-Key", Help.PrivateKeys.AnalyzeKey);

            return client;
        }

        private HttpClient ConstructTranslatorClient()
        {
            HttpClient client = new HttpClient();

            // Request headers.
            client.DefaultRequestHeaders.Add("Ocp-Apim-Subscription-Key", Help.PrivateKeys.TranslateKey);

            return client;
        }

        #region Methods: Event Handlers
        private void ConfigureEventHandlers()
        {
            if (translateButton != null)
            {
                translateButton.TouchUpInside += async (sender, e) =>
                {
                    await TranslateButton_TouchUpInside();
                };

            }
        }

        private async Task TranslateButton_TouchUpInside()
        {
            translateProgressIndicator.StartAnimating();

            await Translate();

            translateProgressIndicator.StopAnimating();
        }
        #endregion
        #endregion

    }
}
