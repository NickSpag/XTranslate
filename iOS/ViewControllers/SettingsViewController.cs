// This file has been autogenerated from a class added in the UI designer.

using System;

using Foundation;
using UIKit;
using System.Collections.Generic;
using System.Drawing;
using XTranslate.iOS.Helpers;

namespace XTranslate.iOS
{
    public partial class SettingsViewController : UIViewController
    {
        public SettingsViewController(IntPtr handle) : base(handle)
        {
        }

        public override void ViewDidLoad()
        {
            base.ViewDidLoad();

            ConfigureLanguagePicker(languageTextField);
        }

        public void ConfigureLanguagePicker(UITextField textField)
        {
            if (String.IsNullOrEmpty(HelpSettings.SelectedLanguage))
                textField.Text = "Pick Language";
            else
                textField.Text = HelpSettings.SelectedLanguage;

            var languagePicker = new UIPickerView
            {
                Model = new LanguagePickerModel(HelpLanguages.Languages, this),
                ShowSelectionIndicator = true
            };

            var screenWidth = UIScreen.MainScreen.Bounds.Width;
            var pickerToolBar = new UIToolbar(new RectangleF(0, 0, (float)screenWidth, 44)) { BarStyle = UIBarStyle.Default, Translucent = true };

            var flexibleSpaceButton = new UIBarButtonItem(UIBarButtonSystemItem.FlexibleSpace);
            var doneButton = new UIBarButtonItem(UIBarButtonSystemItem.Done, (sender, e) => textField.ResignFirstResponder());
            pickerToolBar.SetItems(new[] { flexibleSpaceButton, doneButton }, false);

            textField.InputView = languagePicker;
            textField.InputAccessoryView = pickerToolBar;
        }

        public void UpdateTranslateLanguage(string newLanguage)
        {
            languageTextField.Text = newLanguage;
            HelpSettings.SelectedLanguage = newLanguage;
        }

    }

    public class LanguagePickerModel : UIPickerViewModel
    {
        private SettingsViewController parentController;
        private List<string> languageList;

        public LanguagePickerModel(List<string> listOfLanguages, SettingsViewController parent)
        {
            this.languageList = listOfLanguages;
            this.parentController = parent;
        }

        public override nint GetRowsInComponent(UIPickerView pickerView, nint component) => languageList.Count;

        public override string GetTitle(UIPickerView pickerView, nint row, nint component) => languageList[(int)row];

        public override nint GetComponentCount(UIPickerView pickerView) => 1;

        public override void Selected(UIPickerView pickerView, nint row, nint component) => parentController.UpdateTranslateLanguage(languageList[(int)row]);
    }



}
